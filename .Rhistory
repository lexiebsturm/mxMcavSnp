snpPCoA$depthZone=as.factor(snpPCoA$depthZone)
# SNP PCoA biplot
mxZooxSnpPcoaPlotA = ggplot(snpPCoA, aes(x = PCo1, y = PCo2, color = pop, fill = pop, shape = depthZone, linetype = depthZone)) +
geom_hline(yintercept = 0, color = "gray90", size = 0.5) +
geom_vline(xintercept = 0, color = "gray90", size = 0.5) +
stat_ellipse(data = subset(snpPCoA, type = "n", geom = "polygon")) + #ellipse
scale_linetype_manual(values=c(1,2,4,3), name = "Depth Zone")+
geom_point(aes(x = PCo1, y = PCo2, shape = depthZone), size = 3, alpha = 0.3, show.legend = FALSE, guide=FALSE) + #individual's points indicated by circles
scale_shape_manual(values = c(24,22,23,25), breaks=c("10","15", "25", "35"), name = "Depth Zone") +
geom_point(aes(x = mean.x, y = mean.y, shape = depthZone), size = 5, color = "black") + #population centroids indicated by triangles
#scale_fill_paletteer_d("LaCroixColoR::PassionFruit", breaks=c("Alacranes", "Bajos del Norte"), name= "Population")+
scale_fill_manual(values = c("seagreen3", "blue"), name= "Population")+
#scale_color_paletteer_d("LaCroixColoR::PassionFruit", breaks=c("Alacranes", "Bajos del Norte"), name= "Population", guide=FALSE) +
scale_color_manual(values = c("seagreen3", "blue"), name= "Population")+
xlab(paste ("PCo 1 (", mxZooxSnpPcoaVar[1],"%)", sep = "")) + #Prints percent variation explained by first axis
ylab(paste ("PCo 2 (", mxZooxSnpPcoaVar[2],"%)", sep = "")) + #Prints percent variation explained by second axis
guides(shape = guide_legend(order = 2), fill = guide_legend(override.aes = list(shape = 22, size = 4, color = NA), order = 1))+ #linetype = guide_legend(order = 3),
theme_bw()
mxZooxSnpPcoaPlot = mxZooxSnpPcoaPlotA +
theme(axis.title.x = element_text(color = "black", size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
axis.title.y = element_text(color = "black", size = 10),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
legend.position = "left",
panel.border = element_rect(color = "black", size = 1.2),
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
mxZooxSnpPcoaPlot
################################################################################################
#####################################################
snpZooxMa = as.matrix(read.table("mxZooxNoClones87Removed.ibsMat"))
mxZooxMds = cmdscale(snpZooxMa, eig = TRUE, x.ret = TRUE, k=2)
# Determine percent variation captured on each axis
# Calculate the eigenvalues so later we can figure out % variation shown on each Principal Coordinate
mxZooxSnpPcoaVar = round(mxZooxMds$eig/sum(mxZooxMds$eig)*100, 1)
mxZooxSnpPcoaVar
# Format data to plot
mxZooxSnpPcoaValues = mxZooxMds$points
mxZooxSnpPcoaValues
snpI2P = read.csv("mxZooxInds2PopsNoClones.csv") # 2-column tab-delimited table of individual assignments to populations; must be in the same order as samples in the bam list or vcf file.
row.names(snpI2P) = snpI2P[,1]
mxZooxSnpPcoaValues=cbind(snpI2P, mxZooxSnpPcoaValues)
mxZooxSnpPcoaValues =as.data.frame(mxZooxSnpPcoaValues, sample = rownames(mxZooxSnpPcoaValues))
colnames(mxZooxSnpPcoaValues)[5] <- "PCo1"
colnames(mxZooxSnpPcoaValues)[6] <- "PCo2"
mxZooxSnpPcoaValues
snpPCoA = merge(mxZooxSnpPcoaValues, aggregate(cbind(mean.x=PCo1,mean.y=PCo2)~popDepth, mxZooxSnpPcoaValues, mean), by="popDepth")
snpPCoA$depthZone=as.factor(snpPCoA$depthZone)
# SNP PCoA biplot
mxZooxSnpPcoaPlotA = ggplot(snpPCoA, aes(x = PCo1, y = PCo2, color = pop, fill = pop, shape = depthZone, linetype = depthZone)) +
geom_hline(yintercept = 0, color = "gray90", size = 0.5) +
geom_vline(xintercept = 0, color = "gray90", size = 0.5) +
#stat_ellipse(data = subset(snpPCoA, type = "n", geom = "polygon")) + #ellipse
#scale_linetype_manual(values=c(1,2,4,3), name = "Depth Zone")+
geom_point(aes(x = PCo1, y = PCo2, shape = depthZone), size = 3, alpha = 0.3, show.legend = FALSE, guide=FALSE) + #individual's points indicated by circles
scale_shape_manual(values = c(24,22,23,25), breaks=c("10","15", "25", "35"), name = "Depth Zone") +
geom_point(aes(x = mean.x, y = mean.y, shape = depthZone), size = 5, color = "black") + #population centroids indicated by triangles
#scale_fill_paletteer_d("LaCroixColoR::PassionFruit", breaks=c("Alacranes", "Bajos del Norte"), name= "Population")+
scale_fill_manual(values = c("seagreen3", "blue"), name= "Population")+
#scale_color_paletteer_d("LaCroixColoR::PassionFruit", breaks=c("Alacranes", "Bajos del Norte"), name= "Population", guide=FALSE) +
scale_color_manual(values = c("seagreen3", "blue"), name= "Population")+
xlab(paste ("PCo 1 (", mxZooxSnpPcoaVar[1],"%)", sep = "")) + #Prints percent variation explained by first axis
ylab(paste ("PCo 2 (", mxZooxSnpPcoaVar[2],"%)", sep = "")) + #Prints percent variation explained by second axis
guides(shape = guide_legend(order = 2), fill = guide_legend(override.aes = list(shape = 22, size = 4, color = NA), order = 1))+ #linetype = guide_legend(order = 3),
theme_bw()
mxZooxSnpPcoaPlot = mxZooxSnpPcoaPlotA +
theme(axis.title.x = element_text(color = "black", size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
axis.title.y = element_text(color = "black", size = 10),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
legend.position = "left",
panel.border = element_rect(color = "black", size = 1.2),
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
mxZooxSnpPcoaPlot
mxZooxSnpPcoaPlot
ggsave("mxZooxSnpPcoaPlot.tiff", plot = mxZooxSnpPcoaPlot, height = 5, width = 7, units = "in", dpi = 300)
snpMa = as.matrix(read.table("mxMcavNoClones.ibsMat"))
mxMds = cmdscale(snpMa, eig = TRUE, x.ret = TRUE)
# Determine percent variation captured on each axis
# Calculate the eigenvalues so later we can figure out % variation shown on each Principal Coordinate
mxSnpPcoaVar = round(mxMds$eig/sum(mxMds$eig)*100, 1)
mxSnpPcoaVar
# Format data to plot
mxSnpPcoaValues = mxMds$points
mxSnpPcoaValues
snpI2P = read.csv("mxInds2PopsNoClones.csv") # 2-column tab-delimited table of individual assignments to populations; must be in the same order as samples in the bam list or vcf file.
row.names(snpI2P) = snpI2P[,1]
mxSnpPcoaValues=cbind(snpI2P, mxSnpPcoaValues)
mxSnpPcoaValues =as.data.frame(mxSnpPcoaValues, sample = rownames(mxSnpPcoaValues))
colnames(mxSnpPcoaValues)[5] <- "PCo1"
colnames(mxSnpPcoaValues)[6] <- "PCo2"
mxSnpPcoaValues
snpPCoA = merge(mxSnpPcoaValues, aggregate(cbind(mean.x=PCo1,mean.y=PCo2)~popDepth, mxSnpPcoaValues, mean), by="popDepth")
snpPCoA$depthZone=as.factor(snpPCoA$depthZone)
#snpPCoA$depthZone = factor(snpPCoA$depthZone, levels(snpPCoA$depthZone)[c(2,1)])
# SNP PCoA biplot
mxSnpPcoaPlotA = ggplot(snpPCoA, aes(x = PCo1, y = PCo2, color = pop, fill = pop, shape = depthZone, linetype = depthZone)) +
geom_hline(yintercept = 0, color = "gray90", size = 0.5) +
geom_vline(xintercept = 0, color = "gray90", size = 0.5) +
#stat_ellipse(data = subset(snpPCoA, type = "n", geom = "polygon")) + #ellipse
#scale_linetype_manual(values=c(1,2,4,3), name = "Depth Zone")+
geom_point(aes(x = PCo1, y = PCo2, shape = depthZone), size = 3, alpha = 0.3, show.legend = FALSE, guide=FALSE) + #individual's points indicated by circles
scale_shape_manual(values = c(24,22,23,25), breaks=c("10","15", "25", "35"), name = "Depth Zone") +
geom_point(aes(x = mean.x, y = mean.y, shape = depthZone), size = 5, color = "black") + #population centroids indicated by triangles
#scale_fill_paletteer_d("LaCroixColoR::PassionFruit", breaks=c("Alacranes", "Bajos del Norte"), name= "Population")+
scale_fill_manual(values = c("seagreen3", "blue"), name= "Population")+
#scale_color_paletteer_d("LaCroixColoR::PassionFruit", breaks=c("Alacranes", "Bajos del Norte"), name= "Population", guide=FALSE) +
scale_color_manual(values = c("seagreen3", "blue"), name= "Population")+
xlab(paste ("PCo 1 (", mxSnpPcoaVar[1],"%)", sep = "")) + #Prints percent variation explained by first axis
ylab(paste ("PCo 2 (", mxSnpPcoaVar[2],"%)", sep = "")) + #Prints percent variation explained by second axis
guides(shape = guide_legend(order = 2), fill = guide_legend(override.aes = list(shape = 22, size = 4, color = NA), order = 1))+ #linetype = guide_legend(order = 3),
theme_bw()
mxSnpPcoaPlot = mxSnpPcoaPlotA +
theme(axis.title.x = element_text(color = "black", size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
axis.title.y = element_text(color = "black", size = 10),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
legend.position = "left",
panel.border = element_rect(color = "black", size = 1.2),
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
mxSnpPcoaPlot
ggsave("mxSnpPcoaPlot.tiff", plot = mxSnpPcoaPlot, height = 5, width = 7, units = "in", dpi = 300)
###################################################################################
mxVcf = read.vcfR("mxMcavNoClones.vcf")
mxGenlightPopDepth = vcfR2genlight(mxVcf, n.cores = 2) # Converts the vcf file into a file format that poppr uses the "genlight" format
locNames(mxGenlightPopDepth) = paste(mxVcf@fix[,1],mxVcf@fix[,2],sep="_")
popData = read.csv("mxInds2PopsNoClones.csv") # Reads in population data for each sample
strata(mxGenlightPopDepth) = data.frame(popData)
setPop(mxGenlightPopDepth) = ~popDepth
amova <- poppr.amova(mxGenlightPopDepth, ~popDepth) #Runs AMOVA
amova
set.seed(1999)
amovasignif <- randtest(amova, nrepet = 99) #Calculates significance levels of the AMOVA with 99 permutations
amovasignif
plot(amovasignif)
set.seed(694)
mx.fst <- stamppFst(mxGenlightPopDepth, nboots = 99, percent = 95, nclusters = 4) #99 permutations
pop.order <- c("Alacranes-10", "Bajos del Norte-10", "Alacranes-15", "Bajos del Norte-15", "Alacranes-25", "Bajos del Norte-25","Alacranes-35", "Bajos del Norte-35")
# reads in fst matrix
snpFstMa <- as.matrix(mx.fst$Fsts)
upperTriangle(snpFstMa, byrow=TRUE) <- lowerTriangle(snpFstMa)
mx.fst <- stamppFst(mxGenlightPopDepth, nboots = 99, percent = 95, nclusters = 4) #99 permutations
mx.fst
mx.fst$Fsts
mx.fst$Pvalues
pop.order <- c("Alacranes-10", "Bajos del Norte-10", "Alacranes-15", "Bajos del Norte-15", "Alacranes-25", "Bajos del Norte-25","Alacranes-35", "Bajos del Norte-35")
# reads in fst matrix
snpFstMa <- as.matrix(mx.fst$Fsts)
upperTriangle(snpFstMa, byrow=TRUE) <- lowerTriangle(snpFstMa)
snpFstMa <- snpFstMa[,pop.order] %>%
.[pop.order,]
snpFstMa[upper.tri(snpFstMa)] <- NA
snpFstMa <- as.data.frame(snpFstMa)
snpFstMa$Pop = factor(row.names(snpFstMa), levels = unique(pop.order))
snpQMa <- as.matrix(mx.fst$Pvalues)
upperTriangle(snpQMa, byrow=TRUE) <- lowerTriangle(snpQMa)
snpQMa <- snpQMa[,pop.order] %>%
.[pop.order,]
snpQMa[upper.tri(snpQMa)] <- NA
snpQMa <- as.data.frame(snpQMa)
snpQMa$Pop = factor(row.names(snpQMa), levels = unique(pop.order))
snpFstMa$Pop = factor(row.names(snpFstMa), levels = unique(pop.order))
snpFst = melt(snpFstMa, id.vars = "Pop", value.name = "Fst", variable.name = "Pop2", na.rm = TRUE)
snpFst = snpFst[snpFst$Pop != snpFst$Pop2,]
snpFst$Fst = round(snpFst$Fst, 3)
snpFst = snpFst %>% mutate(Fst = replace(Fst, Fst < 0, 0))
head(snpFst)
snpQ = melt(snpQMa, id.vars = "Pop", value.name = "Pval", variable.name = "Pop2", na.rm = TRUE)
snpQ = snpQ[snpQ$Pop != snpQ$Pop2,]
snpQ$Qval = p.adjust(snpQ$Pval, method = "BH")
head(snpQ)
snpHeatmapA = ggplot(data = snpFst, aes(Pop, Pop2, fill = Fst))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "white", high = "red", midpoint = 0, limit = c(0, 0.08),
space = "Lab", name = expression(paste(italic("F")[ST])))+
geom_text(data = snpFst, aes(Pop, Pop2, label = Fst), color = ifelse(snpQ$Qval <= 0.05,"black", "darkgrey"), size = ifelse(snpQ$Qval < 0.05, 6, 5)) +
guides(fill=guide_colorbar(barwidth = 1, barheight = 12, title.position = "top", title.hjust = 0.5))+
scale_y_discrete(position = "right")+
scale_x_discrete(labels = str_wrap(c("Bajos del Norte-10", "Alacranes-15", "Bajos del Norte-15", "Alacranes-25", "Bajos del Norte-25","Alacranes-35", "Bajos del Norte-35"), width = 6)) +
#ggtitle("   SNP") +
theme_minimal()
snpHeatmap = snpHeatmapA + theme(
axis.text.x = element_text(vjust = 1, size = 16, hjust = 0.5, color = "black"),
axis.text.y = element_text(size = 16, color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.position = "right",
legend.direction = "vertical",
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
plot.title = element_text(size = 16)
)
snpHeatmap
ggsave("snpHeatMap.tiff", plot = snpHeatmap, width = 30, height = 15, units = "cm", dpi = 300)
amova
#####Bayescan
source('plot_R.r')
#NewVersion
dat1 = read.table("mxMcav.baye_fst.txt",header=T)
head(dat1)
table(dat1[,"qval"]<0.1)
dat1$locus = c(1:nrow(dat1))
outs=which(dat1[,"qval"]<0.1)
plot_bayescan("mxMcav.baye_fst.txt",FDR=0.1,add_text=F,size=0.5,highlight=outs)
#OldVersion
dat2 = read.table("mxMcavInds.baye_fst.txt",header=T)
head(dat2)
table(dat2[,"qval"]<0.1)
dat2$locus = c(1:nrow(dat2))
outs=which(dat2[,"qval"]<0.1)
plot_bayescan("mxMcavInds.baye_fst.txt",FDR=0.1,add_text=F,size=0.5,highlight=outs)
## SNPs potentially under selection
genes = read.table("mcav_gene_regions.tab")
#NewVersion
dat1 = read.table("mxMcav.baye_fst.txt",header=T)
head(dat1)
table(dat1[,"qval"]<0.1)
dat1$locus = c(1:nrow(dat1))
outs=which(dat1[,"qval"]<0.1)
plot_bayescan("mxMcav.baye_fst.txt",FDR=0.1,add_text=F,size=0.5,highlight=outs)
#NewVersion
dat1 = read.table("mxMcav.baye_fst.txt",header=T)
head(dat1)
table(dat1[,"qval"]<0.1)
dat1$locus = c(1:nrow(dat1))
outs=which(dat1[,"qval"]<0.1)
plot_bayescan("mxMcav.baye_fst.txt",FDR=0.1,add_text=F,size=0.5,highlight=outs)
## SNPs potentially under selection
genes = read.table("mcav_gene_regions.tab")
names(genes) = c("chromo","start","end","gene")
# expand gene regions ± 2000 bp
genes$start = genes$start -2000
genes$end = genes$end +2000
gnames = read.table("mcav_cog.txt", sep = "\t")
names(gnames) = c("gene", "cog", "protein")
genes = full_join(genes, gnames, by = "gene")
genes$protein=as.character(genes$protein)
genes$protein[is.na(genes$protein)]="unknown"
#how many annotated genes do we have?
nrow(genes[genes$protein!="unknown",])
head(genes)
snpLoci = read.table("mxMcavNoClones.mafs.gz", header = TRUE)
snpLoci$locus = c(1:nrow(snpLoci))
outsByGene = snpLoci %>% dplyr::select(locus, chromo, position) %>%
filter(locus %in% outs) %>%
#filter(locus %in% outsQval) %>%
full_join(., outsQval, by = "locus") %>%
full_join(., genes, by = "chromo") %>%
filter(position>start, position<end)
outsByGene = snpLoci %>% dplyr::select(locus, chromo, position) %>%
filter(locus %in% outs) %>%
filter(locus %in% outsQval) %>%
full_join(., outsQval, by = "locus") %>%
full_join(., genes, by = "chromo") %>%
filter(position>start, position<end)
#NewVersion
dat1 = read.table("mxMcav.baye_fst.txt",header=T)
head(dat1)
table(dat1[,"qval"]<0.1)
dat1$locus = c(1:nrow(dat1))
outs=which(dat1[,"qval"]<0.1)
plot_bayescan("mxMcav.baye_fst.txt",FDR=0.1,add_text=F,size=0.5,highlight=outs)
## SNPs potentially under selection
genes = read.table("mcav_gene_regions.tab")
head(genes)
names(genes) = c("chromo","start","end","gene")
head(genes)
# expand gene regions ± 2000 bp
genes$start = genes$start -2000
genes$end = genes$end +2000
gnames = read.table("mcav_cog.txt", sep = "\t")
head(gnames)
names(gnames) = c("gene", "cog", "protein")
head(gnames)
genes = full_join(genes, gnames, by = "gene")
genes$protein=as.character(genes$protein)
genes$protein[is.na(genes$protein)]="unknown"
#how many annotated genes do we have?
nrow(genes[genes$protein!="unknown",])
head(genes)
snpLoci = read.table("mxMcavNoClones.mafs.gz", header = TRUE)
snpLoci$locus = c(1:nrow(snpLoci))
outsByGene = snpLoci %>% dplyr::select(locus, chromo, position) %>%
filter(locus %in% outs) %>%
filter(locus %in% outsQval) %>%
full_join(., outsQval, by = "locus") %>%
full_join(., genes, by = "chromo") %>%
filter(position>start, position<end)
outsByGene = outsByGene[c(1:3,5:9,4)]
for(i in 1:nrow(outsByGene)) {
if (outsByGene$qval[i] < .01) {
outsByGene$sig[i] = "***"
} else {
if (outsByGene$qval[i] < .05) {
outsByGene$sig[i] = "**"
} else {
outsByGene$sig[i] = "*"
}
}
}
outsByGene
#NewVersion
dat1 = read.table("mxMcav.baye_fst.txt",header=T)
head(dat1)
table(dat1[,"qval"]<0.1)
dat1$locus = c(1:nrow(dat1))
outs=which(dat1[,"qval"]<0.1)
plot_bayescan("mxMcav.baye_fst.txt",FDR=0.1,add_text=F,size=0.5,highlight=outs)
#####Bayescan
source('plot_R.r')
#NewVersion
dat1 = read.table("mxMcav.baye_fst.txt",header=T)
head(dat1)
table(dat1[,"qval"]<0.1)
dat1$locus = c(1:nrow(dat1))
outs=which(dat1[,"qval"]<0.1)
plot_bayescan("mxMcav.baye_fst.txt",FDR=0.1,add_text=F,size=0.5,highlight=outs)
## SNPs potentially under selection
genes = read.table("mcav_gene_regions.tab")
names(genes) = c("chromo","start","end","gene")
# expand gene regions ± 2000 bp
genes$start = genes$start -2000
genes$end = genes$end +2000
gnames = read.table("mcav_cog.txt", sep = "\t")
gnames = read.table("mcav_cog.txt", sep = "\t")
gnames = read.table("mcav_cog.txt", sep = "\t", quote="", fill=FALSE)
names(gnames) = c("gene", "cog", "protein")
head(gnames)
genes = full_join(genes, gnames, by = "gene")
genes$protein=as.character(genes$protein)
genes$protein[is.na(genes$protein)]="unknown"
#how many annotated genes do we have?
nrow(genes[genes$protein!="unknown",])
head(genes)
snpLoci = read.table("mxMcavNoClones.mafs.gz", header = TRUE)
snpLoci$locus = c(1:nrow(snpLoci))
outsByGene = snpLoci %>% dplyr::select(locus, chromo, position) %>%
filter(locus %in% outs) %>%
filter(locus %in% outsQval) %>%
full_join(., outsQval, by = "locus") %>%
full_join(., genes, by = "chromo") %>%
filter(position>start, position<end)
outsByGene = outsByGene[c(1:3,5:9,4)]
for(i in 1:nrow(outsByGene)) {
if (outsByGene$qval[i] < .01) {
outsByGene$sig[i] = "***"
} else {
if (outsByGene$qval[i] < .05) {
outsByGene$sig[i] = "**"
} else {
outsByGene$sig[i] = "*"
}
}
}
outsByGene
#####Bayescan
source('plot_R.r')
#NewVersion
dat1 = read.table("mxMcav.baye_fst.txt",header=T)
head(dat1)
table(dat1[,"qval"]<0.1)
dat1$locus = c(1:nrow(dat1))
outs=which(dat1[,"qval"]<0.1)
plot_bayescan("mxMcav.baye_fst.txt",FDR=0.1,add_text=F,size=0.5,highlight=outs)
## SNPs potentially under selection
genes = read.table("mcav_gene_regions.tab")
names(genes) = c("chromo","start","end","gene")
# expand gene regions ± 2000 bp
genes$start = genes$start -2000
genes$end = genes$end +2000
gnames = read.table("mcav_cog.txt", sep = "\t", quote="", fill=FALSE)
names(gnames) = c("gene", "cog", "protein")
genes = full_join(genes, gnames, by = "gene")
head(genes)
genes$protein=as.character(genes$protein)
head(genes)
genes$protein[is.na(genes$protein)]="unknown"
head(genes)
head(genes)
#how many annotated genes do we have?
nrow(genes[genes$protein!="unknown",])
head(genes)
snpLoci = read.table("mxMcavNoClones.mafs.gz", header = TRUE)
snpLoci$locus = c(1:nrow(snpLoci))
outsByGene = snpLoci %>% dplyr::select(locus, chromo, position) %>%
filter(locus %in% outs) %>%
filter(locus %in% outsQval) %>%
full_join(., outsQval, by = "locus") %>%
full_join(., genes, by = "chromo") %>%
filter(position>start, position<end)
outsByGene = snpLoci %>% dplyr::select(locus, chromo, position) %>%
filter(locus %in% outs) %>%
#filter(locus %in% outsQval) %>%
full_join(., outsQval, by = "locus") %>%
full_join(., genes, by = "chromo") %>%
filter(position>start, position<end)
outliers= dat1 %>% filter(qval < 0.1)
outsQval=select(outliers, qval, locus)
#####Bayescan
source('plot_R.r')
#NewVersion
dat1 = read.table("mxMcav.baye_fst.txt",header=T)
head(dat1)
table(dat1[,"qval"]<0.1)
dat1$locus = c(1:nrow(dat1))
outs=which(dat1[,"qval"]<0.1)
plot_bayescan("mxMcav.baye_fst.txt",FDR=0.1,add_text=F,size=0.5,highlight=outs)
outliers= dat1 %>% filter(qval < 0.1)
outsQval=select(outliers, qval, locus)
outsQval
## SNPs potentially under selection
genes = read.table("mcav_gene_regions.tab")
names(genes) = c("chromo","start","end","gene")
# expand gene regions ± 2000 bp
genes$start = genes$start -2000
genes$end = genes$end +2000
gnames = read.table("mcav_cog.txt", sep = "\t", quote="", fill=FALSE)
names(gnames) = c("gene", "cog", "protein")
genes = full_join(genes, gnames, by = "gene")
genes$protein=as.character(genes$protein)
genes$protein[is.na(genes$protein)]="unknown"
#how many annotated genes do we have?
nrow(genes[genes$protein!="unknown",])
head(genes)
snpLoci = read.table("mxMcavNoClones.mafs.gz", header = TRUE)
snpLoci$locus = c(1:nrow(snpLoci))
outsByGene = snpLoci %>% dplyr::select(locus, chromo, position) %>%
filter(locus %in% outs) %>%
#filter(locus %in% outsQval) %>%
full_join(., outsQval, by = "locus") %>%
full_join(., genes, by = "chromo") %>%
filter(position>start, position<end)
outsByGene = outsByGene[c(1:3,5:9,4)]
for(i in 1:nrow(outsByGene)) {
if (outsByGene$qval[i] < .01) {
outsByGene$sig[i] = "***"
} else {
if (outsByGene$qval[i] < .05) {
outsByGene$sig[i] = "**"
} else {
outsByGene$sig[i] = "*"
}
}
}
outsByGene
#only show annotated genes
outsAnno = outsByGene %>% filter(protein != "unknown")
outsAnno
write.csv(x=outsAnno, file="annotatedOutliers.csv")
#NewVersion
datDepth = read.table("mxMcavDepth.baye_fst.txt",header=T)
head(datDepth)
table(datDepth[,"qval_g"]<0.1)
table(datDepth[,"qval_alpha"]<0.1)
#NewVersion
dat1 = read.table("mxMcav.baye_fst.txt",header=T)
head(dat1)
###################################################################################
#Minor allele frequencies and depth?
mxMIF=read.csv("mxMIF.csv")
mxMIFPlot <- ggplot(mxMIF, aes(x=depth, y=mif)) +
geom_boxplot()+
theme_bw()
mxMIFPlot
###################################################################################
#Minor allele frequencies and depth?
mxMIF=read.csv("mxMIF.csv")
head(mxMIF)
###################################################################################
#Minor allele frequencies and depth?
mxMIF=read.csv("mxMIF.csv")
mxMIFPlot <- ggplot(mxMIF, aes(group=pop, x=depth, y=mif, color=site)) +
geom_boxplot()+
theme_bw()
mxMIFPlot
mxMIF.lm = lm(mif ~ depth, data=mxMif)
mxMIF.lm = lm(mif ~ depth, data=mxMIF)
summary(mxMIF.lm)$r.squared
mxMIF.lm = lm(mif ~ depth*site, data=mxMIF)
summary(mxMIF.lm)$r.squared
ggplot(mxMIF, aes(group=pop, x=depth, y=mif, color=site)) + geom_point()+ geom_smooth(method=lm)
head(mxMIF)
ggplot(mxMIF, aes(group=pop, x=depth, y=mif, color=site, shape=locus)) + geom_point()+ geom_smooth(method=lm)
as.factor(mxMIF$locus)
ggplot(mxMIF, aes(group=pop, x=depth, y=mif, color=site, shape=locus)) + geom_point()+ geom_smooth(method=lm)
ggplot(mxMIF, aes(group=pop, x=depth, y=mif, color=site, shape=locus)) + geom_point()+ geom_smooth(method=lm)++
scale_shape_identity()
ggplot(mxMIF, aes(group=pop, x=depth, y=mif, color=site, shape=locus)) + geom_point()+ geom_smooth(method=lm)+scale_shape_identity()
